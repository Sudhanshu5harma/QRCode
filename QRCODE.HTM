<html>
<head>
<meta http-equiv="Page-Enter" content="revealTrans(Duration=1.0,Transition=23)">
<meta http-equiv="Page-Exit" content="revealTrans(Duration=1.0,Transition=23)">
<noscript class=A>This Application Requires JavaScript Plug-in which has to be initialized or installed. It seems that your OS does not have the Plug-in Installed or has been disabled by you. Please Enable/Install the Plug-in. If you have the plug-in and is currently disabled, right-click on the light-yellow bar above, Choose "Allow Blocked Content..." and then click "Yes" from the consecutive dialog box, you should see the Application running, or else install the plug-in from Internet/Reliable Disc.</noscript>
<style>
.QRB
{
border:1;
font-family:Book Antiqua;
font-size:20;
background:Transparent;
color:black;
text-align:center;
overflow:hidden;
}
.QRI
{
border:1;
font-family:Book Antiqua;
font-size:20;
color:black;
background:White;
text-align:center;
width:1000;
}
.QRC
{
border:1;
font-family:Book Antiqua;
font-size:20;
color:black;
background:transparent;
text-align:center;
}
</style>
<title>Quick Response Code Block</title>	
<script language="JavaScript">
/*QR Code: Quick Response Code is a special coding technique used to encrypt data bits in the form of certain machine readable forms*/
var QR_Code=function(){
var QR_Code=function(typeNumber,errorCorrectLevel){
var PAD0=0xEC;
var PAD1=0x11;
var _typeNumber=typeNumber;
var _errorCorrectLevel=QRErrorCorrectLevel[errorCorrectLevel];
var _modules=null;
var _moduleCount=0;
var _dataCache=null;
var _dataList=new Array();
var _this={};
var makeImpl=function(test,maskPattern){
_moduleCount=_typeNumber*4+17;
_modules=function(moduleCount){
var modules=new Array(moduleCount);
for(var row=0;row<moduleCount;row+=1){
modules[row]=new Array(moduleCount);
for(var col=0;col<moduleCount;col+=1){
modules[row][col]=null;
}
}
return modules;
}(_moduleCount);
setupPositionProbePattern(0,0);
setupPositionProbePattern(_moduleCount-7,0);
setupPositionProbePattern(0,_moduleCount-7);
setupPositionAdjustPattern();
setupTimingPattern();
setupTypeInfo(test,maskPattern);
if(_typeNumber>=7){
setupTypeNumber(test);
}
if(_dataCache==null){
_dataCache=createData(_typeNumber,_errorCorrectLevel,_dataList);
}
mapData(_dataCache,maskPattern);
};
var setupPositionProbePattern=function(row,col){
for(var r=-1;r<=7;r+=1){
if(row+r<=-1||_moduleCount<=row+r) continue;
for(var c=-1;c<=7;c+=1){
if(col+c<=-1||_moduleCount<=col+c) continue;
if((0<=r&&r<=6&&(c==0||c==6))||(0<=c&&c<=6&&(r==0||r==6))||(2<=r&&r<=4&&2<=c&&c<=4)){
_modules[row+r][col+c]=true;
} else{
_modules[row+r][col+c]=false;
}
}
}
};
var getBestMaskPattern=function(){
var minLostPoint=0;
var pattern=0;
for(var i=0;i<8;i+=1){
makeImpl(true,i);
var lostPoint=QRUtil.getLostPoint(_this);
if(i==0||minLostPoint>lostPoint){
minLostPoint=lostPoint;
pattern=i;
}
}
return pattern;
};
var setupTimingPattern=function(){
for(var r=8;r<_moduleCount-8;r+=1){
if(_modules[r][6]!=null){
continue;
}
_modules[r][6]=(r%2==0);
}
for(var c=8;c<_moduleCount-8;c+=1){
if(_modules[6][c]!=null){
continue;
}
_modules[6][c]=(c%2==0);
}
};
var setupPositionAdjustPattern=function(){
var pos=QRUtil.getPatternPosition(_typeNumber);
for(var i=0;i<pos.length;i+=1){
for(var j=0;j<pos.length;j+=1){
var row=pos[i];
var col=pos[j];
if(_modules[row][col]!=null){
continue;
}
for(var r=-2;r<=2;r+=1){
for(var c=-2;c<=2;c+=1){
if(r==-2||r==2||c==-2||c==2||(r==0&&c==0)){
_modules[row+r][col+c]=true;
} else{
_modules[row+r][col+c]=false;
}
}
}
}
}
};
var setupTypeNumber=function(test){
var bits=QRUtil.getBCHTypeNumber(_typeNumber);
for(var i=0;i<18;i+=1){
var mod=(!test&&((bits >> i)&1)==1);
_modules[Math.floor(i/3)][i%3+_moduleCount-8-3]=mod;
}
for(var i=0;i<18;i+=1){
var mod=(!test&&((bits >> i)&1)==1);
_modules[i%3+_moduleCount-8-3][Math.floor(i/3)]=mod;
}
};
var setupTypeInfo=function(test,maskPattern){
var data=(_errorCorrectLevel<<3)|maskPattern;
var bits=QRUtil.getBCHTypeInfo(data);
/*Vertical Array is defined here*/
for(var i=0;i<15;i+=1){
var mod=(!test&&((bits >> i)&1)==1);
if(i<6){
_modules[i][8]=mod;
} else if(i<8){
_modules[i+1][8]=mod;
} else{
_modules[_moduleCount-15+i][8]=mod;
}
}
/*Horizontal Array is defined here*/
for(var i=0;i<15;i+=1){
var mod=(!test&&((bits >> i)&1)==1);
if(i<8){
_modules[8][_moduleCount-i-1]=mod;
} else if(i<9){
_modules[8][15-i-1+1]=mod;
} else{
_modules[8][15-i-1]=mod;
}
}
/*Module Fixing is done here*/
_modules[_moduleCount-8][8]=(!test);
};
var mapData=function(data,maskPattern){
var inc=-1;
var row=_moduleCount-1;
var bitIndex=7;
var byteIndex=0;
var maskFunc=QRUtil.getMaskFunction(maskPattern);
for(var col=_moduleCount-1;col>0;col-=2){
if(col==6) col-=1;
while(true){
for(var c=0;c<2;c+=1){
if(_modules[row][col-c]==null){
var dark=false;
if(byteIndex<data.length){
dark=(( (data[byteIndex]>>>bitIndex)&1)==1);
}
var mask=maskFunc(row,col-c);
if(mask){
dark=!dark;
}
_modules[row][col-c]=dark;
bitIndex-=1;
if(bitIndex==-1){
byteIndex+=1;
bitIndex=7;
}
}
}
row+=inc;
if(row<0||_moduleCount<=row){
row-=inc;
inc=-inc;
break;
}
}
}
};
var createBytes=function(buffer,rsBlocks){
var offset=0;
var maxDcCount=0;
var maxEcCount=0;
var dcdata=new Array(rsBlocks.length);
var ecdata=new Array(rsBlocks.length);
for(var r=0;r<rsBlocks.length;r+=1){
var dcCount=rsBlocks[r].dataCount;
var ecCount=rsBlocks[r].totalCount-dcCount;
maxDcCount=Math.max(maxDcCount,dcCount);
maxEcCount=Math.max(maxEcCount,ecCount);
dcdata[r]=new Array(dcCount);
for(var i=0;i<dcdata[r].length;i+=1){
dcdata[r][i]=0xff&buffer.getBuffer()[i+offset];
}
offset+=dcCount;
var rsPoly=QRUtil.getErrorCorrectPolynomial(ecCount);
var rawPoly=qrPolynomial(dcdata[r],rsPoly.getLength()-1);
var modPoly=rawPoly.mod(rsPoly);
ecdata[r]=new Array(rsPoly.getLength()-1);
for(var i=0;i<ecdata[r].length;i+=1){
var modIndex=i+modPoly.getLength()-ecdata[r].length;
ecdata[r][i]=(modIndex>=0)? modPoly.get(modIndex):0;
}
}
var totalCodeCount=0;
for(var i=0;i<rsBlocks.length;i+=1){
totalCodeCount+=rsBlocks[i].totalCount;
}
var data=new Array(totalCodeCount);
var index=0;
for(var i=0;i<maxDcCount;i+=1){
for(var r=0;r<rsBlocks.length;r+=1){
if(i<dcdata[r].length){
data[index]=dcdata[r][i];
index+=1;
}
}
}
for(var i=0;i<maxEcCount;i+=1){
for(var r=0;r<rsBlocks.length;r+=1){
if(i<ecdata[r].length){
data[index]=ecdata[r][i];
index+=1;
}
}
}
return data;
};
var createData=function(typeNumber,errorCorrectLevel,dataList){
var rsBlocks=QRRSBlock.getRSBlocks(typeNumber,errorCorrectLevel);
var buffer=qrBitBuffer();
for(var i=0;i<dataList.length;i+=1){
var data=dataList[i];
buffer.put(data.getMode(),4);
buffer.put(data.getLength(),QRUtil.getLengthInBits(data.getMode(),typeNumber));
data.write(buffer);
}
/*Calculation of Maximum Data bits are done here*/
var totalDataCount=0;
for(var i=0;i<rsBlocks.length;i+=1){
totalDataCount+=rsBlocks[i].dataCount;
}
if(buffer.getLengthInBits()>totalDataCount*8){
throw new Error('code length overflow. ('+ buffer.getLengthInBits()+ '>'+ totalDataCount*8+ ')');
}
/*Last part of the code where padding of bits is done*/
if(buffer.getLengthInBits()+4<=totalDataCount*8){
buffer.put(0,4);
}
/*Checking for padding of bits*/
while(buffer.getLengthInBits()%8!=0){
buffer.putBit(false);
}
/*If padding is true then do this*/
while(true){
if(buffer.getLengthInBits()>=totalDataCount*8){
break;
}
buffer.put(PAD0,8);
if(buffer.getLengthInBits()>=totalDataCount*8){
break;
}
buffer.put(PAD1,8);
}
return createBytes(buffer,rsBlocks);
};
_this.addData=function(data){
var newData=qr8BitByte(data);
_dataList.push(newData);
_dataCache=null;
};
_this.isDark=function(row,col){
if(row<0||_moduleCount<=row||col<0||_moduleCount<=col){
throw new Error(row+','+col);
}
return _modules[row][col];
};
_this.getModuleCount=function(){
return _moduleCount;
};
_this.make=function(){
makeImpl(false,getBestMaskPattern());
};
_this.createTableTag=function(cellSize,margin){
cellSize=cellSize||2;
margin=(typeof margin=='undefined')? cellSize*4:margin;
var QR_HTML='';
QR_HTML+='<table style="';
QR_HTML+=' border-width: 0px;border-style: none;';
QR_HTML+=' border-collapse: collapse;';
QR_HTML+=' padding: 0px;margin: '+margin+'px;';
QR_HTML+='">';
QR_HTML+='<tbody>';
for(var r=0;r<_this.getModuleCount();r+=1){
QR_HTML+='<tr>';
for(var c=0;c<_this.getModuleCount();c+=1){
QR_HTML+='<td style="';
QR_HTML+=' border-width: 0px;border-style: none;';
QR_HTML+=' border-collapse: collapse;';
QR_HTML+=' padding: 0px;margin: 0px;';
QR_HTML+=' width: '+cellSize+'px;';
QR_HTML+=' height: '+cellSize+'px;';
QR_HTML+=' background-color: ';
QR_HTML+=_this.isDark(r,c)?document.getElementById("FGC").value:'White';
QR_HTML+=';';
QR_HTML+='"/>';
}
QR_HTML+='</tr>';
}
QR_HTML+='</tbody>';
QR_HTML+='</table>';
return QR_HTML;
};
_this.createImgTag=function(cellSize,margin){
cellSize=cellSize||2;
margin=(typeof margin=='undefined')? cellSize*4:margin;
var size=_this.getModuleCount()*cellSize+margin*2;
var min=margin;
var max=size-margin;
return createImgTag(size,size,function(x,y){
if(min<=x&&x<max&&min<=y&&y<max){
var c=Math.floor((x-min)/cellSize);
var r=Math.floor((y-min)/cellSize);
return _this.isDark(r,c)? 1:0;//0:1
} else{
return 1;
}
});
};
return _this;
};
/*Conversion of Strings to Digital bytes*/
QR_Code.stringToBytes=function(s){
var bytes=new Array();
for(var i=0;i<s.length;i+=1){
var c=s.charCodeAt(i);
bytes.push(c&0xff);
}
return bytes;
};
/*Creation of Strings to Digital bytes*/
QR_Code.createStringToBytes=function(unicodeData,numChars){
/*Conversion Mapping*/
var unicodeMap=function(){
var bin=base64DecodeInputStream(unicodeData);
var read=function(){
var b=bin.read();
if(b==-1) throw new Error();
return b;
};
var count=0;
var unicodeMap={};
while(true){
var b0=bin.read();
if(b0==-1) break;
var b1=read();
var b2=read();
var b3=read();
var k=String.fromCharCode((b0<<8)|b1);
var v=(b2<<8)|b3;
unicodeMap[k]=v;
count+=1;
}
if(count!=numChars){
throw new Error(count+'!='+numChars);
}
return unicodeMap;
}();
var unknownChar='?'.charCodeAt(0);
return function(s){
var bytes=new Array();
for(var i=0;i<s.length;i+=1){
var c=s.charCodeAt(i);
if(c<128){
bytes.push(c);
} else{
var b=unicodeMap[s.charAt(i)];
if(typeof b=='number'){
if((b&0xff)==b){
/* One Byte*/
bytes.push(b);
} else{
/* Two Bytes*/
bytes.push(b>>>8);
bytes.push(b&0xff);
}
} else{
bytes.push(unknownChar);
}
}
}
return bytes;
};
};
/*QR Mode*/
var QRMode={
MODE_NUMBER :1<<0,
MODE_ALPHA_NUM:1<<1,
MODE_8BIT_BYTE:1<<2,
MODE_KANJI :1<<3
};
/*QR Error Correction Level*/
var QRErrorCorrectLevel={
L:1,
M:0,
Q:3,
H:2
};
/*QR Masking Pattern*/
var QRMaskPattern={
PATTERN000:0,
PATTERN001:1,
PATTERN010:2,
PATTERN011:3,
PATTERN100:4,
PATTERN101:5,
PATTERN110:6,
PATTERN111:7
};
/*QR Utility Function*/
var QRUtil=function(){
var PATTERN_POSITION_TABLE=[
[],
[6,18],
[6,22],
[6,26],
[6,30],
[6,34],
[6,22,38],
[6,24,42],
[6,26,46],
[6,28,50],
[6,30,54],
[6,32,58],
[6,34,62],
[6,26,46,66],
[6,26,48,70],
[6,26,50,74],
[6,30,54,78],
[6,30,56,82],
[6,30,58,86],
[6,34,62,90],
[6,28,50,72,94],
[6,26,50,74,98],
[6,30,54,78,102],
[6,28,54,80,106],
[6,32,58,84,110],
[6,30,58,86,114],
[6,34,62,90,118],
[6,26,50,74,98,122],
[6,30,54,78,102,126],
[6,26,52,78,104,130],
[6,30,56,82,108,134],
[6,34,60,86,112,138],
[6,30,58,86,114,142],
[6,34,62,90,118,146],
[6,30,54,78,102,126,150],
[6,24,50,76,102,128,154],
[6,28,54,80,106,132,158],
[6,32,58,84,110,136,162],
[6,26,54,82,110,138,166],
[6,30,58,86,114,142,170]
];
var G15=(1<<10)|(1<<8)|(1<<5)|(1<<4)|(1<<2)|(1<<1)|(1<<0);
var G18=(1<<12)|(1<<11)|(1<<10)|(1<<9)|(1<<8)|(1<<5)|(1<<2)|(1<<0);
var G15_MASK=(1<<14)|(1<<12)|(1<<10)|(1<<4)|(1<<1);
var _this={};
var getBCHDigit=function(data){
var digit=0;
while(data!=0){
digit+=1;
data>>>=1;
}
return digit;
};
_this.getBCHTypeInfo=function(data){
var d=data<<10;
while(getBCHDigit(d)-getBCHDigit(G15)>=0){
d^=(G15<<(getBCHDigit(d)-getBCHDigit(G15)));
}
return ((data<<10)|d)^G15_MASK;
};
_this.getBCHTypeNumber=function(data){
var d=data<<12;
while(getBCHDigit(d)-getBCHDigit(G18)>=0){
d^=(G18<<(getBCHDigit(d)-getBCHDigit(G18)));
}
return (data<<12)|d;
};
_this.getPatternPosition=function(typeNumber){
return PATTERN_POSITION_TABLE[typeNumber-1];
};
_this.getMaskFunction=function(maskPattern){
switch (maskPattern){
case QRMaskPattern.PATTERN000 :
return function(i,j){ return (i+j)%2==0;};
case QRMaskPattern.PATTERN001 :
return function(i,j){ return i%2==0;};
case QRMaskPattern.PATTERN010 :
return function(i,j){ return j%3==0;};
case QRMaskPattern.PATTERN011 :
return function(i,j){ return (i+j)%3==0;};
case QRMaskPattern.PATTERN100 :
return function(i,j){ return (Math.floor(i/2)+Math.floor(j/3))%2==0;};
case QRMaskPattern.PATTERN101 :
return function(i,j){ return (i*j)%2+(i*j)%3==0;};
case QRMaskPattern.PATTERN110 :
return function(i,j){ return ((i*j)%2+(i*j)%3)%2==0;};
case QRMaskPattern.PATTERN111 :
return function(i,j){ return ((i*j)%3+(i+j)%2)%2==0;};
default :
throw new Error('bad maskPattern:'+maskPattern);
}
};
_this.getErrorCorrectPolynomial=function(errorCorrectLength){
var a=qrPolynomial([1],0);
for(var i=0;i<errorCorrectLength;i+=1){
a=a.multiply(qrPolynomial([1,QRMath.gexp(i)],0));
}
return a;
};
_this.getLengthInBits=function(mode,type){
if(1<=type&&type<10){
/*For levels 1 to 9*/
switch(mode){
case QRMode.MODE_NUMBER:return 10;
case QRMode.MODE_ALPHA_NUM:return 9;
case QRMode.MODE_8BIT_BYTE: return 8;
case QRMode.MODE_KANJI: return 8;
default :
throw new Error('mode:'+mode);
}
} else if(type<27){
/*For levels 10 to 26*/
switch(mode){
case QRMode.MODE_NUMBER:return 12;
case QRMode.MODE_ALPHA_NUM:return 11;
case QRMode.MODE_8BIT_BYTE: return 16;
case QRMode.MODE_KANJI: return 10;
default :
throw new Error('mode:'+mode);
}
} else if(type<41){
/*For levels 27 to 40*/
switch(mode){
case QRMode.MODE_NUMBER:return 14;
case QRMode.MODE_ALPHA_NUM: return 13;
case QRMode.MODE_8BIT_BYTE: return 16;
case QRMode.MODE_KANJI: return 12;
default :
throw new Error('mode:'+mode);
}
} else{
throw new Error('type:'+type);
}
};
_this.getLostPoint=function(QR_Code){
var moduleCount=QR_Code.getModuleCount();
var lostPoint=0;
/*For level 1*/
for(var row=0;row<moduleCount;row+=1){
for(var col=0;col<moduleCount;col+=1){
var sameCount=0;
var dark=QR_Code.isDark(row,col);
for(var r=-1;r<=1;r+=1){
if(row+r<0||moduleCount<=row+r){
continue;
}
for(var c=-1;c<=1;c+=1){
if(col+c<0||moduleCount<=col+c){
continue;
}
if(r==0&&c==0){
continue;
}
if(dark==QR_Code.isDark(row+r,col+c)){
sameCount+=1;
}
}
}
if(sameCount>5){
lostPoint+=(3+sameCount-5);
}
}
};
/*For level 2*/
for(var row=0;row<moduleCount-1;row+=1){
for(var col=0;col<moduleCount-1;col+=1){
var count=0;
if(QR_Code.isDark(row,col)) count+=1;
if(QR_Code.isDark(row+1,col)) count+=1;
if(QR_Code.isDark(row,col+1)) count+=1;
if(QR_Code.isDark(row+1,col+1)) count+=1;
if(count==0||count==4){
lostPoint+=3;
}
}
}
/*For level 3*/
for(var row=0;row<moduleCount;row+=1){
for(var col=0;col<moduleCount-6;col+=1){
if(QR_Code.isDark(row,col)&& !QR_Code.isDark(row,col+1)&&QR_Code.isDark(row,col+2)&&QR_Code.isDark(row,col+3)&&QR_Code.isDark(row,col+4)&& !QR_Code.isDark(row,col+5)&&QR_Code.isDark(row,col+6)){
lostPoint+=40;
}
}
}
for(var col=0;col<moduleCount;col+=1){
for(var row=0;row<moduleCount-6;row+=1){
if(QR_Code.isDark(row,col)&& !QR_Code.isDark(row+1,col)&&QR_Code.isDark(row+2,col)&&QR_Code.isDark(row+3,col)&&QR_Code.isDark(row+4,col)&& !QR_Code.isDark(row+5,col)&&QR_Code.isDark(row+6,col)){
lostPoint+=40;
}
}
}
/*For level 4*/
var darkCount=0;
for(var col=0;col<moduleCount;col+=1){
for(var row=0;row<moduleCount;row+=1){
if(QR_Code.isDark(row,col)){
darkCount+=1;
}
}
}
var ratio=Math.abs(100*darkCount/moduleCount/moduleCount-50)/5;
lostPoint+=ratio*10;
return lostPoint;
};
return _this;
}();
/*QR Mathematical Function */
var QRMath=function(){
var EXP_TABLE=new Array(256);
var LOG_TABLE=new Array(256);
/*Table Initialisation*/
for(var i=0;i<8;i+=1){
EXP_TABLE[i]=1<<i;
}
for(var i=8;i<256;i+=1){
EXP_TABLE[i]=EXP_TABLE[i-4]^EXP_TABLE[i-5]^EXP_TABLE[i-6]^EXP_TABLE[i-8];
}
for(var i=0;i<255;i+=1){
LOG_TABLE[EXP_TABLE[i] ]=i;
}
var _this={};
_this.glog=function(n){
if(n<1){
throw new Error('glog('+n+')');
}
return LOG_TABLE[n];
};
_this.gexp=function(n){
while(n<0){
n+=255;
}
while(n>=256){
n-=255;
}
return EXP_TABLE[n];
};
return _this;
}();
/*QR Polynomial Declaration*/
function qrPolynomial(num,shift){
if(typeof num.length=='undefined'){
throw new Error(num.length+'/'+shift);
}
var _num=function(){
var offset=0;
while(offset<num.length&&num[offset]==0){
offset+=1;
}
var _num=new Array(num.length-offset+shift);
for(var i=0;i<num.length-offset;i+=1){
_num[i]=num[i+offset];
}
return _num;
}();
var _this={};
_this.get=function(index){
return _num[index];
};
_this.getLength=function(){
return _num.length;
};
_this.multiply=function(e){
var num=new Array(_this.getLength()+e.getLength()-1);
for(var i=0;i<_this.getLength();i+=1){
for(var j=0;j<e.getLength();j+=1){
num[i+j]^=QRMath.gexp(QRMath.glog(_this.get(i))+QRMath.glog(e.get(j)));
}
}
return qrPolynomial(num,0);
};
_this.mod=function(e){
if(_this.getLength()-e.getLength()<0){
return _this;
}
var ratio=QRMath.glog(_this.get(0))-QRMath.glog(e.get(0));
var num=new Array(_this.getLength());
for(var i=0;i<_this.getLength();i+=1){
num[i]=_this.get(i);
}
for(var i=0;i<e.getLength();i+=1){
num[i]^=QRMath.gexp(QRMath.glog(e.get(i))+ratio);
}
/*This is a recursive/ iterative call of the previously declared function*/
return qrPolynomial(num,0).mod(e);
};
return _this;
};
/* QR Reed Solomon Error Correcting Block declaration*/
var QRRSBlock=function(){
var RS_BLOCK_TABLE=[
/*LMHQ*/
//Array 1
[1,26,19],
[1,26,16],
[1,26,13],
[1,26,9],
//Array 2
[1,44,34],
[1,44,28],
[1,44,22],
[1,44,16],
//Array 3
[1,70,55],
[1,70,44],
[2,35,17],
[2,35,13],
//Array 4
[1,100,80],
[2,50,32],
[2,50,24],
[4,25,9],
//Array 5
[1,134,108],
[2,67,43],
[2,33,15,2,34,16],
[2,33,11,2,34,12],
//Array 6
[2,86,68],
[4,43,27],
[4,43,19],
[4,43,15],
//Array 7
[2,98,78],
[4,49,31],
[2,32,14,4,33,15],
[4,39,13,1,40,14],
//Array 8
[2,121,97],
[2,60,38,2,61,39],
[4,40,18,2,41,19],
[4,40,14,2,41,15],
//Array 9
[2,146,116],
[3,58,36,2,59,37],
[4,36,16,4,37,17],
[4,36,12,4,37,13],
//Array 10
[2,86,68,2,87,69],
[4,69,43,1,70,44],
[6,43,19,2,44,20],
[6,43,15,2,44,16]
];
var qrRSBlock=function(totalCount,dataCount){
var _this={};
_this.totalCount=totalCount;
_this.dataCount=dataCount;
return _this;
};
var _this={};
var getRsBlockTable=function(typeNumber,errorCorrectLevel){
switch(errorCorrectLevel){
case QRErrorCorrectLevel.L :
return RS_BLOCK_TABLE[(typeNumber-1)*4+0];
case QRErrorCorrectLevel.M :
return RS_BLOCK_TABLE[(typeNumber-1)*4+1];
case QRErrorCorrectLevel.Q :
return RS_BLOCK_TABLE[(typeNumber-1)*4+2];
case QRErrorCorrectLevel.H :
return RS_BLOCK_TABLE[(typeNumber-1)*4+3];
default :
return undefined;
}
};
_this.getRSBlocks=function(typeNumber,errorCorrectLevel){
var rsBlock=getRsBlockTable(typeNumber,errorCorrectLevel);
if(typeof rsBlock=='undefined'){
throw new Error('bad rs block @ typeNumber:'+typeNumber +'/errorCorrectLevel:'+errorCorrectLevel);
}
var length=rsBlock.length/3;
var list=new Array();
for(var i=0;i<length;i+=1){
var count=rsBlock[i*3+0];
var totalCount=rsBlock[i*3+1];
var dataCount=rsBlock[i*3+2];
for(var j=0;j<count;j+=1){
list.push(qrRSBlock(totalCount,dataCount));
}
}
return list;
};
return _this;
}();
/*QR Bit buffer*/
var qrBitBuffer=function(){
var _buffer=new Array();
var _length=0;
var _this={};
_this.getBuffer=function(){
return _buffer;
};
_this.get=function(index){
var bufIndex=Math.floor(index/8);
return ((_buffer[bufIndex]>>>(7-index%8))&1)==1;
};
_this.put=function(num,length){
for(var i=0;i<length;i+=1){
_this.putBit(( (num>>>(length-i-1))&1)==1);
}
};
_this.getLengthInBits=function(){
return _length;
};
_this.putBit=function(bit){
var bufIndex=Math.floor(_length/8);
if(_buffer.length<=bufIndex){
_buffer.push(0);
}
if(bit){
_buffer[bufIndex] |= (0x80>>>(_length%8));
}
_length+=1;
};
return _this;
};
/*QR 8-bit Byte function*/
var qr8BitByte=function(data){
var _mode=QRMode.MODE_8BIT_BYTE;
var _data=data;
var _bytes=QR_Code.stringToBytes(data);
var _this={};
_this.getMode=function(){
return _mode;
};
_this.getLength=function(buffer){
return _bytes.length;
};
_this.write=function(buffer){
for(var i=0;i<_bytes.length;i+=1){
buffer.put(_bytes[i],8);
}
};
return _this;
};
/* Byte Array Output Stream function*/
var byteArrayOutputStream=function(){
var _bytes=new Array();
var _this={};
_this.writeByte=function(b){
_bytes.push(b&0xff);
};
_this.writeShort=function(i){
_this.writeByte(i);
_this.writeByte(i>>>8);
};
_this.writeBytes=function(b,off,len){
off=off||0;
len=len||b.length;
for(var i=0;i<len;i+=1){
_this.writeByte(b[i+off]);
}
};
_this.writeString=function(s){
for(var i=0;i<s.length;i+=1){
_this.writeByte(s.charCodeAt(i));
}
};
_this.toByteArray=function(){
return _bytes;
};
_this.toString=function(){
var s='';
s+='[';
for(var i=0;i<_bytes.length;i+=1){
if(i>0){
s+=',';
}
s+=_bytes[i];
}
s+=']';
return s;
};
return _this;
};
/*Base 64 Encoder Output Streaming function*/
var base64EncodeOutputStream=function(){
var _buffer=0;
var _buflen=0;
var _length=0;
var _base64='';
var _this={};
var writeEncoded=function(b){
_base64+=String.fromCharCode(encode(b&0x3f));
};
var encode=function(n){
if(n<0){
/* Call this if an error occurs*/
} else if(n<26){
return 0x41+n;
} else if(n<52){
return 0x61+(n-26);
} else if(n<62){
return 0x30+(n-52);
} else if(n==62){
return 0x2b;
} else if(n==63){
return 0x2f;
}
throw new Error('n:'+n);
};
_this.writeByte=function(n){
_buffer=(_buffer<<8)|(n&0xff);
_buflen+=8;
_length+=1;
while(_buflen>=6){
writeEncoded(_buffer>>>(_buflen-6));
_buflen-=6;
}
};
_this.flush=function(){
if(_buflen>0){
writeEncoded(_buffer<<(6-_buflen));
_buffer=0;
_buflen=0;
}
if(_length%3!=0){
/*Padding length of digits*/
var padlen=3-_length%3;
for(var i=0;i<padlen;i+=1){
_base64+='=';
}
}
};
_this.toString=function(){
return _base64;
};
return _this;
};
/*Base 64 Decoder Input Streaming function*/
var base64DecodeInputStream=function(str){
var _str=str;
var _pos=0;
var _buffer=0;
var _buflen=0;
var _this={};
_this.read=function(){
while(_buflen<8){
if(_pos>=_str.length){
if(_buflen==0){
return -1;
}
throw new Error('unexpected end of file./'+_buflen);
}
var c=_str.charAt(_pos);
_pos+=1;
if(c=='='){
_buflen=0;
return -1;
} else if(c.match(/^\s$/)){
/*Ignore if blank or white spaces in between code words*/
continue;
}
_buffer=(_buffer<<6)|decode(c.charCodeAt(0));
_buflen+=6;
}
var n=(_buffer>>>(_buflen-8))&0xff;
_buflen-=8;
return n;
};
var decode=function(c){
if(0x41<=c&&c<=0x5a){
return c-0x41;
} else if(0x61<=c&&c<=0x7a){
return c-0x61+26;
} else if(0x30<=c&&c<=0x39){
return c-0x30+52;
} else if(c==0x2b){
return 62;
} else if(c==0x2f){
return 63;
} else{
throw new Error('c:'+c);
}
};
return _this;
};
/*Rendering the table as an Image*/
var gifImage=function(width,height){
var _width=width;
var _height=height;
var _data=new Array(width*height);
var _this={};
_this.setPixel=function(x,y,pixel){
_data[y*_width+x]=pixel;
};
_this.write=function(out){}
var bitOutputStream=function(out){
var _out=out;
var _bitLength=0;
var _bitBuffer=0;
var _this={};
_this.write=function(data,length){
if((data>>>length)!=0){
throw new Error('length over');
}
while(_bitLength+length>=8){
_out.writeByte(0xff&((data<<_bitLength)|_bitBuffer));
length-=(8-_bitLength);
data>>>=(8-_bitLength);
_bitBuffer=0;
_bitLength=0;
}
_bitBuffer=(data<<_bitLength)|_bitBuffer;
_bitLength=_bitLength+length;
};
_this.flush=function(){
if(_bitLength>0){
_out.writeByte(_bitBuffer);
}
};
return _this;
};
var getLZWRaster=function(lzwMinCodeSize){
var clearCode=1<<lzwMinCodeSize;
var endCode=(1<<lzwMinCodeSize)+1;
var bitLength=lzwMinCodeSize+1;
/*Setting up Lempel Ziv Welch Error Correcting Table*/
var table=lzwTable();
for(var i=0;i<clearCode;i+=1){
table.add(String.fromCharCode(i));
}
table.add(String.fromCharCode(clearCode));
table.add(String.fromCharCode(endCode));
var byteOut=byteArrayOutputStream();
var bitOut=bitOutputStream(byteOut);
/*Clear out code*/
bitOut.write(clearCode,bitLength);
var dataIndex=0;
var s=String.fromCharCode(_data[dataIndex]);
dataIndex+=1;
while(dataIndex<_data.length){
var c=String.fromCharCode(_data[dataIndex]);
dataIndex+=1;
if(table.contains(s+c)){
s+=c;
} else{
bitOut.write(table.indexOf(s),bitLength);
if(table.size()<0xfff){
if(table.size()==(1<<bitLength)){
bitLength+=1;
}
table.add(s+c);
}
s=c;
}
}
bitOut.write(table.indexOf(s),bitLength);
/*End the code*/
bitOut.write(endCode,bitLength);
bitOut.flush();
return byteOut.toByteArray();
};
var lzwTable=function(){
var _map={};
var _size=0;
var _this={};
_this.add=function(key){
if(_this.contains(key)){
throw new Error('Duplicate key:'+key);
}
_map[key]=_size;
_size+=1;
};
_this.size=function(){
return _size;
};
_this.indexOf=function(key){
return _map[key];
};
_this.contains=function(key){
return typeof _map[key]!='undefined';
};
return _this;
};
return _this;
};
return QR_Code;
}();
function FC()
{
document.getElementById("FGC").value=document.getElementById("QRS").options[document.getElementById("QRS").selectedIndex].value;
document.getElementById("FGC").style.color=document.getElementById("QRS").options[document.getElementById("QRS").selectedIndex].value;
document.getElementById("QRS").style.color=document.getElementById("QRS").options[document.getElementById("QRS").selectedIndex].value;
}
var draw_QR_Code=function(text,typeNumber,errorCorrectLevel){
document.write(create_QR_Code(text,typeNumber,errorCorrectLevel));
};
var create_QR_Code=function(text,typeNumber,errorCorrectLevel,table){
var qr=QR_Code(typeNumber||4,errorCorrectLevel||'M');
qr.addData(text);
qr.make();
return qr.createTableTag();
};
var Generate_QR_Code=function(){
var text=document.forms[0].elements['msg'].value.
replace(/^[\s\u3000]+|[\s\u3000]+$/g,'');
document.getElementById('qr').innerHTML=create_QR_Code(text);
document.getElementById('qr').innerHTML+="<span id=QRT style='zoom:0.1;font-family:Book Antiqua;font-size:20;text-align:center;color:Black'>Text: "+text+"</span>";
};
function HDD()
{
var b,w,c,p,fso,f;
fso=new ActiveXObject("Scripting.FileSystemObject");
p="C:\\Users\\Sridhar\\Desktop\\Quick Response Code (QRC) "+new Date().toLocaleDateString()+' at '+new Date().toLocaleTimeString().substring(0,2)+'hh'+new Date().toLocaleTimeString().substring(3,5)+'mm'+new Date().toLocaleTimeString().substring(6,8)+"ss.htm";
/*Caution: p here denotes path, it has been set to save the resultant QR Code Matrix on the Desktop of Windows 7 OS. Change the path here according to the OS and paths on your system hard-drive*/
if(p)
{
f=fso.CreateTextFile(p, true);
w=document.getElementsByTagName("DIV").item().outerHTML;
while(true)
{
b=Math.min(w.length, 1000)
c=w.slice(0, b);
try
{
f.Write(c);
}
catch(e)
{
}
if(b<w.length)
{
w=w.slice(b,w.length);
}
else
{
break;
}
}
f.Close();
}
location.replace(p);
}
/*Notify user of any error with Error Message, URL of the file and Line number*/
function Error(m,u,l)
{
a=window.createPopup()
b=a.document.body;
b.style.border="2 ridge red";
b.style.color="White";
b.style.fontFamily="Book Antiqua";
b.style.fontSize="15";
b.style.filter="progid:DXImageTransform.Microsoft.Gradient(startColorstr=Red, endColorstr=Darkred, GradientType=1)";
b.innerHTML="<div align=center>STOP! Error Encountered</div><div align=justify>Error: "+m+"<br>Line: "+l+"<br>URL: "+u+"<br>Reload the Page</div>";
a.show(390,150,640,120);
return true;
}
window.onerror=Error;
</script>
</head>
<body class=QRB  oncontextmenu="return false" onselectstart="return false" oncopy="return false" ondragstart="return false" onfocus="return false" onblur="return false" onhelp="return false" style=overflow:auto>
<center>
<form>
<input type=text maxlength=60 id="msg" class=QRI value="Enter Text here" onfocus="this.value=''"><br><select id=QRS onchange="FC()" class=QRC><option value=f0f8ff> Aliceblue
<option value=faebd7>Antique white
<option value=00ffff>Aqua
<option value=7fffd4>Aquamarine
<option value=f0ffff>Azure
<option value=f5f5dc>Beige
<option value=ffe4c4>Bisque
<option value=000000 selected>Black
<option value=ffebcd>Blanched almond
<option value=0000ff>Blue
<option value=8a2be2>Blue violet
<option value=a52a2a>Brown
<option value=deb887>Burly wood
<option value=5f9ea0>Cadet Blue
<option value=7fff00>Chartreuse
<option value=d2691e>Chocolate
<option value=ff7f50>Coral
<option value=6495ed>Cornflower blue
<option value=fff8dc>Corn silk
<option value=dc143c>Crimson
<option value=00ffff>Cyan
<option value=00008b>Dark blue
<option value=008b8b>Dark cyan
<option value=b8860b>Dark goldenrod
<option value=a9a9a9>Dark gray
<option value=006400>Dark green
<option value=bdb76b>Dark khaki
<option value=8b008b>Dark magenta
<option value=556b2f>Dark olive green
<option value=ff8c00>Dark orange
<option value=9932cc>Dark orchid
<option value=8b0000>Dark red
<option value=e9967a>Dark salmon
<option value=8fbc8f>Dark sea green
<option value=483d8b>Dark slate blue
<option value=2f4f4f>Dark slate gray
<option value=00ced1>Dark turquoise
<option value=9400d3>Dark violet
<option value=ff1493>Deep pink
<option value=00bfff>Deep sky-blue
<option value=696969>Dim gray
<option value=1e90ff>Dodger blue
<option value=b22222>Firebrick
<option value=fffaf0>Floral white
<option value=228b22>Forest green
<option value=dcdcdc>Gainesboro
<option value=f8f8ff>Ghost white
<option value=ffd700>Gold
<option value=daa520>Goldenrod
<option value=808080>Gray
<option value=008000>Green
<option value=adff2f>Green yellow
<option value=f0fff0>Honeydew
<option value=ff69b4>Hot pink
<option value=cd5c5c>Indian red
<option value=4b0082>Indigo
<option value=fffff0>Ivory
<option value=f0e68c>Khaki
<option value=e6e6fa>Lavender
<option value=fff0f5>Lavender blush
<option value=7cfc00>Lawn green
<option value=fffacd>Lemon chiffon
<option value=add8e6>Light blue
<option value=f08080>Light coral
<option value=e0ffff>Light cyan
<option value=fafad2>Light goldenrod yellow
<option value=d3d3d3>Light gray
<option value=90ee90>Light green
<option value=ffb6c1>Light pink
<option value=ffa07a>Light salmon
<option value=20b2aa>Light sea green
<option value=87cefa>Light sky blue
<option value=8470ff>Light slate blue
<option value=778899>Light slate gray
<option value=b0c4de>Light steel blue
<option value=ffffe0>Light yellow
<option value=00ff00>Lime
<option value=32cd32>Lime green
<option value=faf0e6>Linen
<option value=ff00ff>Magenta
<option value=800000>Maroon
<option value=66cdaa>Medium aquamarine
<option value=0000cd>Medium blue
<option value=ba55d3>Medium orchid
<option value=9370d8>Medium purple
<option value=3cb371>Medium sea green
<option value=7b68ee>Medium slate blue
<option value=00fa9a>Medium spring green
<option value=48d1cc>Medium turquoise
<option value=c71585>Medium violet red
<option value=191970>Midnight blue
<option value=f5fffa>Mint cream
<option value=ffe4e1>Misty rose
<option value=ffe4b5>Moccasin
<option value=ffdead>Navajo white
<option value=000080>Navy
<option value=fdf5e6>Old lace
<option value=808000>Olive
<option value=6b8e23>Olive drab
<option value=ffa500>Orange
<option value=ff4500>Orange red
<option value=da70d6>Orchid
<option value=eee8aa>Pale goldenrod
<option value=98fb98>Pale green
<option value=afeeee>Pale turquoise
<option value=d87093>Pale violet red
<option value=ffefd5>Papaya whip
<option value=ffdab9>Peach puff
<option value=cd853f>Peru
<option value=ffc0cb>Pink
<option value=dda0dd>Plum
<option value=b0e0e6>Powder blue
<option value=800080>Purple
<option value=ff0000>Red
<option value=bc8f8f>Rosy brown
<option value=4169e1>Royal blue
<option value=8b4513>Saddle brown
<option value=fa8072>Salmon
<option value=f4a460>Sandy brown
<option value=2e8b57>Sea green
<option value=fff5ee>Seashell
<option value=a0522d>Sienna
<option value=c0c0c0>Silver
<option value=87ceeb>Sky blue
<option value=6a5acd>Slate blue
<option value=708090>Slate gray
<option value=fffafa>Snow
<option value=00ff7f>Spring green
<option value=4682b4>Steel blue
<option value=d2b48c>Tan
<option value=008080>Teal
<option value=d8bfd8>Thistle
<option value=ff6347>Tomato
<option value=40e0d0>Turquoise
<option value=ee82ee>Violet
<option value=d02090>Violet red
<option value=f5deb3>Wheat
<option value=ffffff>White
<option value=f5f5f5>White smoke
<option value=ffff00>Yellow
<option value=9acd32>Yellow green
</select>
<input type=text id="FGC" class=QRC value="000000" onfocus="this.value=''" onkeyup="this.style.color=this.value">
<br><input type="button" value="Generate 33x33 QR Code" onclick="Generate_QR_Code()" hidefocus class=QRC><input type="button" value="Save QR Code to HDD..." onclick="HDD()" class=QRC>
<div id="qr" style="text-align:center"></div>
</center>
</form>
</body>
</html>
